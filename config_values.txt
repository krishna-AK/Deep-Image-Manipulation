parser.add_argument('--name', type=str, required=True, help='name of the experiment. It decides where to store samples and models')
parser.add_argument('--easy_label', type=str, default="")

parser.add_argument('--num_gpus', type=int, default=1, help='#GPUs to use. 0 means CPU mode')
parser.add_argument('--checkpoints_dir', type=str, default='./checkpoints/', help='models are saved here')
parser.add_argument('--model', type=str, default='swapping_autoencoder', help='which model to use')
parser.add_argument('--optimizer', type=str, default='swapping_autoencoder', help='which model to use')
parser.add_argument('--phase', type=str, default='train', help='train, val, test, etc')
parser.add_argument('--resume_iter', type=str, default="latest",
                    help="# iterations (in thousands) to resume")
parser.add_argument('--num_classes', type=int, default=0)

# input/output sizes
parser.add_argument('--batch_size', type=int, default=1, help='input batch size')
parser.add_argument('--preprocess', type=str, default='scale_width_and_crop', help='scaling and cropping of images at load time.')
parser.add_argument('--load_size', type=int, default=256, help='Scale images to this size. The final image will be cropped to --crop_size.')
parser.add_argument('--crop_size', type=int, default=256, help='Crop to the width of crop_size (after initially scaling the images to load_size.)')
parser.add_argument('--preprocess_crop_padding', type=int, default=None, help='padding parameter of transforms.RandomCrop(). It is not used if --preprocess does not contain crop option.')
parser.add_argument('--no_flip', action='store_true')
parser.add_argument('--shuffle_dataset', type=str, default=None, choices=('true', 'false'))

# for setting inputs
parser.add_argument('--dataroot', type=str, default=".")
parser.add_argument('--dataset_mode', type=str, default='lmdb')
parser.add_argument('--nThreads', default=8, type=int, help='# threads for loading data')

# networks
parser.add_argument("--netG", default="StyleGAN2Resnet")
parser.add_argument("--netD", default="StyleGAN2")
parser.add_argument("--netE", default="StyleGAN2Resnet")
parser.add_argument("--netPatchD", default="StyleGAN2")
parser.add_argument("--use_antialias", type=util.str2bool, default=True)